import java.io.*;
import java.security.SecureRandom;
import java.security.spec.KeySpec;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;

public class FileEncryptDecrypt {

    private static final String ALGORITHM = "AES/CBC/PKCS5Padding";
    private static final String SECRET_KEY_ALGO = "PBKDF2WithHmacSHA256";
    private static final int KEY_SIZE = 256;
    private static final int ITERATIONS = 65536;
    private static final int IV_SIZE = 16;  // AES block size

    // Generate secret key from password and salt
    public static SecretKey getSecretKey(char[] password, byte[] salt) throws Exception {
        SecretKeyFactory factory = SecretKeyFactory.getInstance(SECRET_KEY_ALGO);
        KeySpec spec = new PBEKeySpec(password, salt, ITERATIONS, KEY_SIZE);
        SecretKey tmp = factory.generateSecret(spec);
        return new SecretKeySpec(tmp.getEncoded(), "AES");
    }

    // Encrypt file
    public static void encryptFile(File inputFile, File outputFile, char[] password) throws Exception {
        // Generate salt
        byte[] salt = new byte[16];
        SecureRandom random = new SecureRandom();
        random.nextBytes(salt);

        SecretKey secretKey = getSecretKey(password, salt);

        // Generate IV
        byte[] iv = new byte[IV_SIZE];
        random.nextBytes(iv);
        IvParameterSpec ivSpec = new IvParameterSpec(iv);

        Cipher cipher = Cipher.getInstance(ALGORITHM);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);

        try (FileInputStream fis = new FileInputStream(inputFile);
             FileOutputStream fos = new FileOutputStream(outputFile)) {

            // Write salt and IV at the start of the file for use during decryption
            fos.write(salt);
            fos.write(iv);

            byte[] buffer = new byte[4096];
            int bytesRead;

            while ((bytesRead = fis.read(buffer)) != -1) {
                byte[] output = cipher.update(buffer, 0, bytesRead);
                if (output != null)
                    fos.write(output);
            }

            byte[] outputBytes = cipher.doFinal();
            if (outputBytes != null)
                fos.write(outputBytes);
        }
    }

    // Decrypt file
    public static void decryptFile(File inputFile, File outputFile, char[] password) throws Exception {
        try (FileInputStream fis = new FileInputStream(inputFile)) {
            // Read salt and IV from input file
            byte[] salt = new byte[16];
            fis.read(salt);

            byte[] iv = new byte[IV_SIZE];
            fis.read(iv);
            IvParameterSpec ivSpec = new IvParameterSpec(iv);

            SecretKey secretKey = getSecretKey(password, salt);

            Cipher cipher = Cipher.getInstance(ALGORITHM);
            cipher.init(Cipher.DECRYPT_MODE, secretKey, ivSpec);

            try (FileOutputStream fos = new FileOutputStream(outputFile)) {
                byte[] buffer = new byte[4096];
                int bytesRead;

                while ((bytesRead = fis.read(buffer)) != -1) {
                    byte[] output = cipher.update(buffer, 0, bytesRead);
                    if (output != null)
                        fos.write(output);
                }

                byte[] outputBytes = cipher.doFinal();
                if (outputBytes != null)
                    fos.write(outputBytes);
            }
        }
    }

    public static void main(String[] args) {
        if (args.length < 4) {
            System.out.println("Usage:");
            System.out.println("To Encrypt: java FileEncryptDecrypt encrypt <inputFile> <outputFile> <password>");
            System.out.println("To Decrypt: java FileEncryptDecrypt decrypt <inputFile> <outputFile> <password>");
            return;
        }

        String mode = args[0];
        File inputFile = new File(args[1]);
        File outputFile = new File(args[2]);
        char[] password = args[3].toCharArray();

        try {
            if (mode.equalsIgnoreCase("encrypt")) {
                encryptFile(inputFile, outputFile, password);
                System.out.println("File encrypted successfully.");
            } else if (mode.equalsIgnoreCase("decrypt")) {
                decryptFile(inputFile, outputFile, password);
                System.out.println("File decrypted successfully.");
            } else {
                System.out.println("Invalid mode. Use 'encrypt' or 'decrypt'.");
            }
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
